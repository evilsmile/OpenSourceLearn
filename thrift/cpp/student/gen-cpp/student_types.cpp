/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "student_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace lj { namespace test {


student::~student() throw() {
}


void student::__set_sno(const int32_t val) {
  this->sno = val;
}

void student::__set_name(const std::string& val) {
  this->name = val;
}

void student::__set_ssex(const bool val) {
  this->ssex = val;
}

void student::__set_sage(const int16_t val) {
  this->sage = val;
}

uint32_t student::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sno);
          this->__isset.sno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ssex);
          this->__isset.ssex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sage);
          this->__isset.sage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t student::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("student");

  xfer += oprot->writeFieldBegin("sno", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ssex", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ssex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sage", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->sage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(student &a, student &b) {
  using ::std::swap;
  swap(a.sno, b.sno);
  swap(a.name, b.name);
  swap(a.ssex, b.ssex);
  swap(a.sage, b.sage);
  swap(a.__isset, b.__isset);
}

student::student(const student& other0) {
  sno = other0.sno;
  name = other0.name;
  ssex = other0.ssex;
  sage = other0.sage;
  __isset = other0.__isset;
}
student& student::operator=(const student& other1) {
  sno = other1.sno;
  name = other1.name;
  ssex = other1.ssex;
  sage = other1.sage;
  __isset = other1.__isset;
  return *this;
}
void student::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "student(";
  out << "sno=" << to_string(sno);
  out << ", " << "name=" << to_string(name);
  out << ", " << "ssex=" << to_string(ssex);
  out << ", " << "sage=" << to_string(sage);
  out << ")";
}

}} // namespace
